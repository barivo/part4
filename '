const blogRouter = require('express').Router()
const Blog = require('../models/blog')
const User = require('../models/user')
const helper = require('../tests/test_helper')
const jwt = require('jsonwebtoken')

const getTokenFrom = request => {
  const authorization = request.get('authorization')
  if (authorization && authorization.toLowerCase().startsWith('bearer ')) {
    return authorization.substring(7)
  }
  return null
}

const authorizeRequest = async request => {
  const body = request.body
  const token = body.token ? body.token : null
  try {
    const decodedToken = jwt.verify(token, process.env.SECRET)
    const user = await User.findById(decodedToken.id)
    return user
  } catch (error) {
    console.log('authorizing request failed: ', error)
    return null
  }
}

blogRouter.get('/', async (request, response) => {
  const blogs = await Blog.find({}).populate('user', {
    username: 1,
    name: 1,
  })
  response.json(blogs.map(blog => blog.toJSON()))
})

blogRouter.get('/:id', async (request, response) => {
  const id = request.params.id
  const result = await Blog.findById(id)
  if (result) {
    response.json(result)
  } else {
    response.status(404).end()
  }
})

blogRouter.post('/', async (request, response) => {
  const body = request.body
  const token = body.token ? body.token : null
  // console.log(request.get('authorization'))
  const decodedToken = jwt.verify(token, process.env.SECRET)

  if (!token || !decodedToken.id) {
    return response.status(401).json({ error: 'token missing or invalid' })
  }

  const user = await User.findById(decodedToken.id)

  const blog = new Blog(request.body)

  const result = await blog.save()

  user.blogs = user.blogs.concat(result._id)
  await user.save()
  response.status(201).json(result)
})

blogRouter.put('/:id', async (request, response) => {
  const body = request.body
  const id = request.params.id
  const blog = {
    title: body.title,
    author: body.author,
    url: body.url,
    likes: body.likes,
  }
  // forgetting the await below allows anyone to update posts
  const loggedInUser = await authorizeRequest(request)
  console.log(body.user)
  if (
    loggedInUser &&
    // to check whether the logged in user own the blog first check that a user prop exists
    // then check to see if they're the same
    (body.user && loggedInUser._id.toString() === body.user[0].id.toString())
  ) {
    Blog.findByIdAndUpdate(id, blog, { new: true }).then(updatedBlog => {
      response.json(updatedBlog.toJSON())
    })
  } else {
    return response
      .status(401)
      .json({ error: `you don't have permission to update that blog` })
  }
})

blogRouter.delete('/:id', async (request, response) => {
  // token is found on the request.body.token
  const body = request.body
  const token = body.token ? body.token : null
  // console.log(request.get('authorization'))
  const decodedToken = jwt.verify(token, process.env.SECRET)

  if (!token || !decodedToken.id) {
    return response.status(401).json({ error: 'token missing or invalid' })
  }

  const blogId = request.params.id
  const blog = await Blog.findById(blogId)

  const user = await User.findById(decodedToken.id)

  /*
  if (
    typeof blog.user[0] === 'undefined' ||
    user._id.toString() !== blog.user[0].toString()
  ) {
    return response
      .status(401)
      .json({ error: 'only logged-in users may delete blogs' })
  }
  */

  await blog.remove()
  user.blogs = user.blogs.filter(
    b => b.id.toString() !== request.params.id.toString()
  )
  await user.save()
  response.status(204).end()
})

module.exports = blogRouter

/* example solution
const router = require('express').Router()
const jwt = require('jsonwebtoken')
const Blog = require('../models/blog')
const User = require('../models/user')

router.get('/', async (request, response) => {
  const blogs = await Blog
    .find({}).populate('user', { username: 1, name: 1 })

  response.json(blogs)
})

router.delete('/:id', async (request, response) => {
  const decodedToken = jwt.verify(request.token, process.env.SECRET)

  if (!request.token || !decodedToken.id) {
    return response.status(401).json({ error: 'token missing or invalid' })
  }

  const user = await User.findById(decodedToken.id)
  const blog = await Blog.findById(request.params.id)
  if (blog.user.toString() !== user.id.toString()) {
    return response.status(401).json({ error: 'only the creator can delete blogs' })
  }

  await blog.remove()
  user.blogs = user.blogs.filter(b => b.id.toString() !== request.params.id.toString())
  await user.save()
  response.status(204).end()
})

router.put('/:id', async (request, response) => {
  const blog = request.body

  const updatedBlog = await Blog.findByIdAndUpdate(request.params.id, blog, { new: true })
  response.json(updatedBlog.toJSON())
})

router.post('/', async (request, response) => {
  const blog = new Blog(request.body)

  const decodedToken = jwt.verify(request.token, process.env.SECRET)

  if (!request.token || !decodedToken.id) {
    return response.status(401).json({ error: 'token missing or invalid' })
  }

  const user = await User.findById(decodedToken.id)

  if (!blog.url || !blog.title) {
    return response.status(400).send({ error: 'title or url missing ' })
  }

  if (!blog.likes) {
    blog.likes = 0
  }

  blog.user = user
  const savedBlog = await blog.save()

  user.blogs = user.blogs.concat(savedBlog._id)
  await user.save()

  response.status(201).json(savedBlog)
})

module.exports = router

*/
